//MEMOIZATION

import java.util.* ;
import java.io.*;
public class Solution {

    static int solve(int ind,int[] height,int[] dp){
    if(ind==0) return 0;
    if(dp[ind]!=-1) return dp[ind];
    int jumpTwo = Integer.MAX_VALUE;
    int jumpOne= solve(ind-1, height,dp)+ Math.abs(height[ind]-height[ind-1]);
    if(ind>1)
        jumpTwo = solve(ind-2, height,dp)+ Math.abs(height[ind]-height[ind-2]);

    return dp[ind]=Math.min(jumpOne, jumpTwo);
}
    public static int frogJump(int n, int heights[]) {
        int [] dp = new int[n+1];
        Arrays.fill(dp,-1);

        return solve(n-1 , heights , dp);
    }

}


// TABULATION

import java.util.* ;
import java.io.*;
public class Solution {
    public static int frogJump(int n, int heights[]) {

        int[] dp = new int [n+1];
        Arrays.fill(dp,0);


        dp[0] = 0;
        for(int i=1; i < n; i++){
            int jumpTwo = Integer.MAX_VALUE;
            int jumpOne= dp[i-1]+ Math.abs(heights[i]-heights[i-1]);
            if(i>1)
                jumpTwo = dp[i-2]+ Math.abs(heights[i]-heights[i-2]);

          dp[i]=Math.min(jumpOne, jumpTwo);
        }
        return dp[n-1];
    }

}


//SPACE OPTIMIZATION

import java.util.* ;
import java.io.*;
public class Solution {
    public static int frogJump(int n, int height[]) {

     int prev=0;
     int prev2=0;
     for(int i=1;i<n;i++){

      int jumpTwo = Integer.MAX_VALUE;
      int jumpOne= prev + Math.abs(height[i]-height[i-1]);
      if(i>1)
        jumpTwo = prev2 + Math.abs(height[i]-height[i-2]);

      int cur_i=Math.min(jumpOne, jumpTwo);
      prev2=prev;
      prev=cur_i;

  }
  return prev;
    }

}